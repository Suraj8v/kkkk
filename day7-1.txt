/*
 * Task 1
Create a  class Point2D  , under package "com.cdac.geometry" for representing a point in x-y co-ordinate system.

1.1 Create a parameterized constructor to accept x & y co-ords.

1.2 Add public String show()) --to return point's x & y co-ords

1.3 Add isEqual method to Point2D class : boolean returning method : must return true if both points are having same x,y co-ords or false otherwise.

1.4 Add a method , calculateDistance , to calc distance between 2 points
Hint : use distance formula.

1.5  Create a driver  class(for UI)  , in the "tester" package "TestPoints" , with main(..)

Ask user , how many points to plot? :
Create suitable array.

1.6  Accept x,y co-ordinates for all the points n store it suitably.
1.7  Display x,y co-ordinates of all the points plotted so far ,using for-each loop.
1.8  Accept 2 indices from user .
Find out if the points at these indices are same or different (Hint : isEqual)
Print the message accordingly. 
If points are not same , display distance between these 2 points.


 */

package com.cdac.geometry;

public class Point2D {
	private int x;
	private int y;

	public Point2D() {
		super();
		this.x = 1;
		this.y = 1;
	}

	public Point2D(int x, int y) {
		super();
		this.x = x;
		this.y = y;
	}

	public String toString() {
		return "x= " + this.x + "y= " + this.y;
	}

	public boolean CoEqual(Point2D p) {
		if (this.x > 0 && this.y > 0 && p.x > 0 && p.y > 0)
			return true;

		if (this.x < 0 && this.y < 0 && p.x < 0 && p.y < 0)
			return true;

		if (this.x > 0 && this.y < 0 && p.x > 0 && p.y < 0)
			return true;
		else if (this.x < 0 && this.y > 0 && p.x < 0 && p.y > 0)
			return true;
		else
			return false;

	}
//Add a method , calculateDistance , to calc distance between 2 points
//Hint : use distance formula.

	public double calDistance(Point2D p) {
		double dis = Math.sqrt(((this.x - p.x) * (this.x - p.x)) + ((this.y - p.y) * (this.y - p.y)));

		return dis;

	}

	public void accept(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public void display() {

		System.out.println();
		System.out.println("(x,y) = (" + x + "," + y + ")");
		System.out.println();
	}

	public void Equal(Point2D p) {

		boolean b = this.CoEqual(p);
		if (b == true) {
			if (this.x == p.x && this.y == p.y)
				System.out.println("both x and y are equal ");
			
			else
				System.out.println(" x and y are not equal but in same quadrant");
		} 
		else
			System.out.println(" x and y are not equal");
	}
}

=============================================================================--------
package com.tester;

import java.util.Scanner;

import com.cdac.geometry.Point2D;

public class TestPoint {

	public static void main(String[] args) {

		System.out.println("how many point create..");
		Scanner sc = new Scanner(System.in);
		int size = sc.nextInt();

		Point2D[] p = new Point2D[size];
		

//		 p[0]=new Point2D(1,2);
//		 p[1]=new Point2D(-1,2);
//		 p[2]=new Point2D(1,-2);
//		 p[3]=new Point2D(-1,-2); 
//		 p[4]=new Point2D(8,2);
//		
		System.out.println("enter  points(x,y) " + size);
		for (int i=0;i<p.length;i++) {
			p[i]=new Point2D();
			System.out.print("Enter x and y for point "+(i+1)+": ");
			p[i].accept(sc.nextInt(), sc.nextInt());
			//System.out.println();
			p[i].display();
		}
		
		System.out.println("Compare two points of Point2D");
		//for(int i=0;i<p.length;i++) {
			int n1 = sc.nextInt();
			int n2=sc.nextInt();
			
			p[n1-1].Equal(p[n2-1]);
			
			double res=p[n1-1].calDistance(p[n2-1]);
			
			System.out.println("distance ="+res);
	}

}
